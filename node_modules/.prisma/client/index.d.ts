
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Modules
 * 
 */
export type Modules = {
  moderation: boolean
  clanning: boolean
  logging: boolean
}

/**
 * Model Guild
 * 
 */
export type Guild = {
  id: string
  guildId: string
  modules: Modules
}

/**
 * Model Member
 * 
 */
export type Member = {
  id: string
  rblxId: number
  xp: number
  userId: number
  medalIDs: string[]
  guildId: string
}

/**
 * Model Medal
 * 
 */
export type Medal = {
  id: string
  name: string
  medalID: number
  description: string
  userIDs: string[]
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Guilds
 * const guilds = await prisma.guild.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Guilds
   * const guilds = await prisma.guild.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.guild`: Exposes CRUD operations for the **Guild** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guilds
    * const guilds = await prisma.guild.findMany()
    * ```
    */
  get guild(): Prisma.GuildDelegate<GlobalReject>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<GlobalReject>;

  /**
   * `prisma.medal`: Exposes CRUD operations for the **Medal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medals
    * const medals = await prisma.medal.findMany()
    * ```
    */
  get medal(): Prisma.MedalDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Guild: 'Guild',
    Member: 'Member',
    Medal: 'Medal'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GuildCountOutputType
   */


  export type GuildCountOutputType = {
    users: number
  }

  export type GuildCountOutputTypeSelect = {
    users?: boolean
  }

  export type GuildCountOutputTypeGetPayload<
    S extends boolean | null | undefined | GuildCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? GuildCountOutputType
    : S extends undefined
    ? never
    : S extends GuildCountOutputTypeArgs
    ?'include' extends U
    ? GuildCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof GuildCountOutputType ? GuildCountOutputType[P] : never
  } 
    : GuildCountOutputType
  : GuildCountOutputType




  // Custom InputTypes

  /**
   * GuildCountOutputType without action
   */
  export type GuildCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GuildCountOutputType
     * 
    **/
    select?: GuildCountOutputTypeSelect | null
  }



  /**
   * Count Type MemberCountOutputType
   */


  export type MemberCountOutputType = {
    medals: number
  }

  export type MemberCountOutputTypeSelect = {
    medals?: boolean
  }

  export type MemberCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MemberCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MemberCountOutputType
    : S extends undefined
    ? never
    : S extends MemberCountOutputTypeArgs
    ?'include' extends U
    ? MemberCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MemberCountOutputType ? MemberCountOutputType[P] : never
  } 
    : MemberCountOutputType
  : MemberCountOutputType




  // Custom InputTypes

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     * 
    **/
    select?: MemberCountOutputTypeSelect | null
  }



  /**
   * Count Type MedalCountOutputType
   */


  export type MedalCountOutputType = {
    users: number
  }

  export type MedalCountOutputTypeSelect = {
    users?: boolean
  }

  export type MedalCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MedalCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MedalCountOutputType
    : S extends undefined
    ? never
    : S extends MedalCountOutputTypeArgs
    ?'include' extends U
    ? MedalCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MedalCountOutputType ? MedalCountOutputType[P] : never
  } 
    : MedalCountOutputType
  : MedalCountOutputType




  // Custom InputTypes

  /**
   * MedalCountOutputType without action
   */
  export type MedalCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MedalCountOutputType
     * 
    **/
    select?: MedalCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Modules
   */





  export type ModulesSelect = {
    moderation?: boolean
    clanning?: boolean
    logging?: boolean
  }

  export type ModulesGetPayload<
    S extends boolean | null | undefined | ModulesArgs,
    U = keyof S
      > = S extends true
        ? Modules
    : S extends undefined
    ? never
    : S extends ModulesArgs
    ?'include' extends U
    ? Modules 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Modules ? Modules[P] : never
  } 
    : Modules
  : Modules



  export interface ModulesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {






  }

  /**
   * The delegate class that acts as a "Promise-like" for Modules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ModulesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Modules without action
   */
  export type ModulesArgs = {
    /**
     * Select specific fields to fetch from the Modules
     * 
    **/
    select?: ModulesSelect | null
  }



  /**
   * Model Guild
   */


  export type AggregateGuild = {
    _count: GuildCountAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
  }

  export type GuildMinAggregateOutputType = {
    id: string | null
    guildId: string | null
  }

  export type GuildMaxAggregateOutputType = {
    id: string | null
    guildId: string | null
  }

  export type GuildCountAggregateOutputType = {
    id: number
    guildId: number
    _all: number
  }


  export type GuildMinAggregateInputType = {
    id?: true
    guildId?: true
  }

  export type GuildMaxAggregateInputType = {
    id?: true
    guildId?: true
  }

  export type GuildCountAggregateInputType = {
    id?: true
    guildId?: true
    _all?: true
  }

  export type GuildAggregateArgs = {
    /**
     * Filter which Guild to aggregate.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guilds
    **/
    _count?: true | GuildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildMaxAggregateInputType
  }

  export type GetGuildAggregateType<T extends GuildAggregateArgs> = {
        [P in keyof T & keyof AggregateGuild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuild[P]>
      : GetScalarType<T[P], AggregateGuild[P]>
  }




  export type GuildGroupByArgs = {
    where?: GuildWhereInput
    orderBy?: Enumerable<GuildOrderByWithAggregationInput>
    by: Array<GuildScalarFieldEnum>
    having?: GuildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildCountAggregateInputType | true
    _min?: GuildMinAggregateInputType
    _max?: GuildMaxAggregateInputType
  }


  export type GuildGroupByOutputType = {
    id: string
    guildId: string
    _count: GuildCountAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
  }

  type GetGuildGroupByPayload<T extends GuildGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GuildGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuildGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuildGroupByOutputType[P]>
            : GetScalarType<T[P], GuildGroupByOutputType[P]>
        }
      >
    >


  export type GuildSelect = {
    id?: boolean
    guildId?: boolean
    modules?: boolean | ModulesArgs
    users?: boolean | MemberFindManyArgs
    _count?: boolean | GuildCountOutputTypeArgs
  }

  export type GuildInclude = {
    users?: boolean | MemberFindManyArgs
    _count?: boolean | GuildCountOutputTypeArgs
  }

  export type GuildGetPayload<
    S extends boolean | null | undefined | GuildArgs,
    U = keyof S
      > = S extends true
        ? Guild
    : S extends undefined
    ? never
    : S extends GuildArgs | GuildFindManyArgs
    ?'include' extends U
    ? Guild  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < MemberGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? GuildCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'modules' ? ModulesGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'users' ? Array < MemberGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? GuildCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Guild ? Guild[P] : never
  } 
    : Guild
  : Guild


  type GuildCountArgs = Merge<
    Omit<GuildFindManyArgs, 'select' | 'include'> & {
      select?: GuildCountAggregateInputType | true
    }
  >

  export interface GuildDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Guild that matches the filter.
     * @param {GuildFindUniqueArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GuildFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Guild'> extends True ? CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>> : CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>

    /**
     * Find the first Guild that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindFirstArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GuildFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Guild'> extends True ? CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>> : CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>

    /**
     * Find zero or more Guilds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guilds
     * const guilds = await prisma.guild.findMany()
     * 
     * // Get first 10 Guilds
     * const guilds = await prisma.guild.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildWithIdOnly = await prisma.guild.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuildFindManyArgs>(
      args?: SelectSubset<T, GuildFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Guild>>, PrismaPromise<Array<GuildGetPayload<T>>>>

    /**
     * Create a Guild.
     * @param {GuildCreateArgs} args - Arguments to create a Guild.
     * @example
     * // Create one Guild
     * const Guild = await prisma.guild.create({
     *   data: {
     *     // ... data to create a Guild
     *   }
     * })
     * 
    **/
    create<T extends GuildCreateArgs>(
      args: SelectSubset<T, GuildCreateArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Create many Guilds.
     *     @param {GuildCreateManyArgs} args - Arguments to create many Guilds.
     *     @example
     *     // Create many Guilds
     *     const guild = await prisma.guild.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildCreateManyArgs>(
      args?: SelectSubset<T, GuildCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Guild.
     * @param {GuildDeleteArgs} args - Arguments to delete one Guild.
     * @example
     * // Delete one Guild
     * const Guild = await prisma.guild.delete({
     *   where: {
     *     // ... filter to delete one Guild
     *   }
     * })
     * 
    **/
    delete<T extends GuildDeleteArgs>(
      args: SelectSubset<T, GuildDeleteArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Update one Guild.
     * @param {GuildUpdateArgs} args - Arguments to update one Guild.
     * @example
     * // Update one Guild
     * const guild = await prisma.guild.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildUpdateArgs>(
      args: SelectSubset<T, GuildUpdateArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Delete zero or more Guilds.
     * @param {GuildDeleteManyArgs} args - Arguments to filter Guilds to delete.
     * @example
     * // Delete a few Guilds
     * const { count } = await prisma.guild.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildDeleteManyArgs>(
      args?: SelectSubset<T, GuildDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guilds
     * const guild = await prisma.guild.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildUpdateManyArgs>(
      args: SelectSubset<T, GuildUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Guild.
     * @param {GuildUpsertArgs} args - Arguments to update or create a Guild.
     * @example
     * // Update or create a Guild
     * const guild = await prisma.guild.upsert({
     *   create: {
     *     // ... data to create a Guild
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guild we want to update
     *   }
     * })
    **/
    upsert<T extends GuildUpsertArgs>(
      args: SelectSubset<T, GuildUpsertArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Find zero or more Guilds that matches the filter.
     * @param {GuildFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const guild = await prisma.guild.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: GuildFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Guild.
     * @param {GuildAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const guild = await prisma.guild.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: GuildAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Guild that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {GuildFindUniqueOrThrowArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GuildFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GuildFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Find the first Guild that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindFirstOrThrowArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GuildFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GuildFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Count the number of Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildCountArgs} args - Arguments to filter Guilds to count.
     * @example
     * // Count the number of Guilds
     * const count = await prisma.guild.count({
     *   where: {
     *     // ... the filter for the Guilds we want to count
     *   }
     * })
    **/
    count<T extends GuildCountArgs>(
      args?: Subset<T, GuildCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildAggregateArgs>(args: Subset<T, GuildAggregateArgs>): PrismaPromise<GetGuildAggregateType<T>>

    /**
     * Group by Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildGroupByArgs['orderBy'] }
        : { orderBy?: GuildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Guild.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GuildClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    modules<T extends ModulesArgs = {}>(args?: Subset<T, ModulesArgs>): CheckSelect<T, Prisma__ModulesClient<Modules | null >, Prisma__ModulesClient<ModulesGetPayload<T> | null >>;

    users<T extends MemberFindManyArgs = {}>(args?: Subset<T, MemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Member>>, PrismaPromise<Array<MemberGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Guild base type for findUnique actions
   */
  export type GuildFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter, which Guild to fetch.
     * 
    **/
    where: GuildWhereUniqueInput
  }

  /**
   * Guild: findUnique
   */
  export interface GuildFindUniqueArgs extends GuildFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Guild base type for findFirst actions
   */
  export type GuildFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter, which Guild to fetch.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     * 
    **/
    distinct?: Enumerable<GuildScalarFieldEnum>
  }

  /**
   * Guild: findFirst
   */
  export interface GuildFindFirstArgs extends GuildFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Guild findMany
   */
  export type GuildFindManyArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter, which Guilds to fetch.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guilds.
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GuildScalarFieldEnum>
  }


  /**
   * Guild create
   */
  export type GuildCreateArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The data needed to create a Guild.
     * 
    **/
    data: XOR<GuildCreateInput, GuildUncheckedCreateInput>
  }


  /**
   * Guild createMany
   */
  export type GuildCreateManyArgs = {
    /**
     * The data used to create many Guilds.
     * 
    **/
    data: Enumerable<GuildCreateManyInput>
  }


  /**
   * Guild update
   */
  export type GuildUpdateArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The data needed to update a Guild.
     * 
    **/
    data: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
    /**
     * Choose, which Guild to update.
     * 
    **/
    where: GuildWhereUniqueInput
  }


  /**
   * Guild updateMany
   */
  export type GuildUpdateManyArgs = {
    /**
     * The data used to update Guilds.
     * 
    **/
    data: XOR<GuildUpdateManyMutationInput, GuildUncheckedUpdateManyInput>
    /**
     * Filter which Guilds to update
     * 
    **/
    where?: GuildWhereInput
  }


  /**
   * Guild upsert
   */
  export type GuildUpsertArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The filter to search for the Guild to update in case it exists.
     * 
    **/
    where: GuildWhereUniqueInput
    /**
     * In case the Guild found by the `where` argument doesn't exist, create a new Guild with this data.
     * 
    **/
    create: XOR<GuildCreateInput, GuildUncheckedCreateInput>
    /**
     * In case the Guild was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
  }


  /**
   * Guild delete
   */
  export type GuildDeleteArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter which Guild to delete.
     * 
    **/
    where: GuildWhereUniqueInput
  }


  /**
   * Guild deleteMany
   */
  export type GuildDeleteManyArgs = {
    /**
     * Filter which Guilds to delete
     * 
    **/
    where?: GuildWhereInput
  }


  /**
   * Guild findRaw
   */
  export type GuildFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Guild aggregateRaw
   */
  export type GuildAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Guild: findUniqueOrThrow
   */
  export type GuildFindUniqueOrThrowArgs = GuildFindUniqueArgsBase
      

  /**
   * Guild: findFirstOrThrow
   */
  export type GuildFindFirstOrThrowArgs = GuildFindFirstArgsBase
      

  /**
   * Guild without action
   */
  export type GuildArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
  }



  /**
   * Model Member
   */


  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberAvgAggregateOutputType = {
    rblxId: number | null
    xp: number | null
    userId: number | null
  }

  export type MemberSumAggregateOutputType = {
    rblxId: number | null
    xp: number | null
    userId: number | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    rblxId: number | null
    xp: number | null
    userId: number | null
    guildId: string | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    rblxId: number | null
    xp: number | null
    userId: number | null
    guildId: string | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    rblxId: number
    xp: number
    userId: number
    medalIDs: number
    guildId: number
    _all: number
  }


  export type MemberAvgAggregateInputType = {
    rblxId?: true
    xp?: true
    userId?: true
  }

  export type MemberSumAggregateInputType = {
    rblxId?: true
    xp?: true
    userId?: true
  }

  export type MemberMinAggregateInputType = {
    id?: true
    rblxId?: true
    xp?: true
    userId?: true
    guildId?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    rblxId?: true
    xp?: true
    userId?: true
    guildId?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    rblxId?: true
    xp?: true
    userId?: true
    medalIDs?: true
    guildId?: true
    _all?: true
  }

  export type MemberAggregateArgs = {
    /**
     * Filter which Member to aggregate.
     * 
    **/
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     * 
    **/
    orderBy?: Enumerable<MemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs = {
    where?: MemberWhereInput
    orderBy?: Enumerable<MemberOrderByWithAggregationInput>
    by: Array<MemberScalarFieldEnum>
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _avg?: MemberAvgAggregateInputType
    _sum?: MemberSumAggregateInputType
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }


  export type MemberGroupByOutputType = {
    id: string
    rblxId: number
    xp: number
    userId: number
    medalIDs: string[]
    guildId: string
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect = {
    id?: boolean
    rblxId?: boolean
    xp?: boolean
    userId?: boolean
    medalIDs?: boolean
    medals?: boolean | MedalFindManyArgs
    guildId?: boolean
    Guild?: boolean | GuildArgs
    _count?: boolean | MemberCountOutputTypeArgs
  }

  export type MemberInclude = {
    medals?: boolean | MedalFindManyArgs
    Guild?: boolean | GuildArgs
    _count?: boolean | MemberCountOutputTypeArgs
  }

  export type MemberGetPayload<
    S extends boolean | null | undefined | MemberArgs,
    U = keyof S
      > = S extends true
        ? Member
    : S extends undefined
    ? never
    : S extends MemberArgs | MemberFindManyArgs
    ?'include' extends U
    ? Member  & {
    [P in TrueKeys<S['include']>]:
        P extends 'medals' ? Array < MedalGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Guild' ? GuildGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends '_count' ? MemberCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'medals' ? Array < MedalGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Guild' ? GuildGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends '_count' ? MemberCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Member ? Member[P] : never
  } 
    : Member
  : Member


  type MemberCountArgs = Merge<
    Omit<MemberFindManyArgs, 'select' | 'include'> & {
      select?: MemberCountAggregateInputType | true
    }
  >

  export interface MemberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MemberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MemberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Member'> extends True ? CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>> : CheckSelect<T, Prisma__MemberClient<Member | null >, Prisma__MemberClient<MemberGetPayload<T> | null >>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MemberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MemberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Member'> extends True ? CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>> : CheckSelect<T, Prisma__MemberClient<Member | null >, Prisma__MemberClient<MemberGetPayload<T> | null >>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MemberFindManyArgs>(
      args?: SelectSubset<T, MemberFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Member>>, PrismaPromise<Array<MemberGetPayload<T>>>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
    **/
    create<T extends MemberCreateArgs>(
      args: SelectSubset<T, MemberCreateArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Create many Members.
     *     @param {MemberCreateManyArgs} args - Arguments to create many Members.
     *     @example
     *     // Create many Members
     *     const member = await prisma.member.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MemberCreateManyArgs>(
      args?: SelectSubset<T, MemberCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
    **/
    delete<T extends MemberDeleteArgs>(
      args: SelectSubset<T, MemberDeleteArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MemberUpdateArgs>(
      args: SelectSubset<T, MemberUpdateArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MemberDeleteManyArgs>(
      args?: SelectSubset<T, MemberDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MemberUpdateManyArgs>(
      args: SelectSubset<T, MemberUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
    **/
    upsert<T extends MemberUpsertArgs>(
      args: SelectSubset<T, MemberUpsertArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Find zero or more Members that matches the filter.
     * @param {MemberFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const member = await prisma.member.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MemberFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Member.
     * @param {MemberAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const member = await prisma.member.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MemberAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Member that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MemberFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Find the first Member that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MemberFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MemberClient<Member>, Prisma__MemberClient<MemberGetPayload<T>>>

    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MemberClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    medals<T extends MedalFindManyArgs = {}>(args?: Subset<T, MedalFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Medal>>, PrismaPromise<Array<MedalGetPayload<T>>>>;

    Guild<T extends GuildArgs = {}>(args?: Subset<T, GuildArgs>): CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Member base type for findUnique actions
   */
  export type MemberFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * Filter, which Member to fetch.
     * 
    **/
    where: MemberWhereUniqueInput
  }

  /**
   * Member: findUnique
   */
  export interface MemberFindUniqueArgs extends MemberFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Member base type for findFirst actions
   */
  export type MemberFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * Filter, which Member to fetch.
     * 
    **/
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     * 
    **/
    orderBy?: Enumerable<MemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     * 
    **/
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     * 
    **/
    distinct?: Enumerable<MemberScalarFieldEnum>
  }

  /**
   * Member: findFirst
   */
  export interface MemberFindFirstArgs extends MemberFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Member findMany
   */
  export type MemberFindManyArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * Filter, which Members to fetch.
     * 
    **/
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     * 
    **/
    orderBy?: Enumerable<MemberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     * 
    **/
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MemberScalarFieldEnum>
  }


  /**
   * Member create
   */
  export type MemberCreateArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * The data needed to create a Member.
     * 
    **/
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }


  /**
   * Member createMany
   */
  export type MemberCreateManyArgs = {
    /**
     * The data used to create many Members.
     * 
    **/
    data: Enumerable<MemberCreateManyInput>
  }


  /**
   * Member update
   */
  export type MemberUpdateArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * The data needed to update a Member.
     * 
    **/
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     * 
    **/
    where: MemberWhereUniqueInput
  }


  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs = {
    /**
     * The data used to update Members.
     * 
    **/
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     * 
    **/
    where?: MemberWhereInput
  }


  /**
   * Member upsert
   */
  export type MemberUpsertArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * The filter to search for the Member to update in case it exists.
     * 
    **/
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     * 
    **/
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }


  /**
   * Member delete
   */
  export type MemberDeleteArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
    /**
     * Filter which Member to delete.
     * 
    **/
    where: MemberWhereUniqueInput
  }


  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs = {
    /**
     * Filter which Members to delete
     * 
    **/
    where?: MemberWhereInput
  }


  /**
   * Member findRaw
   */
  export type MemberFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Member aggregateRaw
   */
  export type MemberAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Member: findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs = MemberFindUniqueArgsBase
      

  /**
   * Member: findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs = MemberFindFirstArgsBase
      

  /**
   * Member without action
   */
  export type MemberArgs = {
    /**
     * Select specific fields to fetch from the Member
     * 
    **/
    select?: MemberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MemberInclude | null
  }



  /**
   * Model Medal
   */


  export type AggregateMedal = {
    _count: MedalCountAggregateOutputType | null
    _avg: MedalAvgAggregateOutputType | null
    _sum: MedalSumAggregateOutputType | null
    _min: MedalMinAggregateOutputType | null
    _max: MedalMaxAggregateOutputType | null
  }

  export type MedalAvgAggregateOutputType = {
    medalID: number | null
  }

  export type MedalSumAggregateOutputType = {
    medalID: number | null
  }

  export type MedalMinAggregateOutputType = {
    id: string | null
    name: string | null
    medalID: number | null
    description: string | null
  }

  export type MedalMaxAggregateOutputType = {
    id: string | null
    name: string | null
    medalID: number | null
    description: string | null
  }

  export type MedalCountAggregateOutputType = {
    id: number
    name: number
    medalID: number
    description: number
    userIDs: number
    _all: number
  }


  export type MedalAvgAggregateInputType = {
    medalID?: true
  }

  export type MedalSumAggregateInputType = {
    medalID?: true
  }

  export type MedalMinAggregateInputType = {
    id?: true
    name?: true
    medalID?: true
    description?: true
  }

  export type MedalMaxAggregateInputType = {
    id?: true
    name?: true
    medalID?: true
    description?: true
  }

  export type MedalCountAggregateInputType = {
    id?: true
    name?: true
    medalID?: true
    description?: true
    userIDs?: true
    _all?: true
  }

  export type MedalAggregateArgs = {
    /**
     * Filter which Medal to aggregate.
     * 
    **/
    where?: MedalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medals to fetch.
     * 
    **/
    orderBy?: Enumerable<MedalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MedalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medals
    **/
    _count?: true | MedalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedalMaxAggregateInputType
  }

  export type GetMedalAggregateType<T extends MedalAggregateArgs> = {
        [P in keyof T & keyof AggregateMedal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedal[P]>
      : GetScalarType<T[P], AggregateMedal[P]>
  }




  export type MedalGroupByArgs = {
    where?: MedalWhereInput
    orderBy?: Enumerable<MedalOrderByWithAggregationInput>
    by: Array<MedalScalarFieldEnum>
    having?: MedalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedalCountAggregateInputType | true
    _avg?: MedalAvgAggregateInputType
    _sum?: MedalSumAggregateInputType
    _min?: MedalMinAggregateInputType
    _max?: MedalMaxAggregateInputType
  }


  export type MedalGroupByOutputType = {
    id: string
    name: string
    medalID: number
    description: string
    userIDs: string[]
    _count: MedalCountAggregateOutputType | null
    _avg: MedalAvgAggregateOutputType | null
    _sum: MedalSumAggregateOutputType | null
    _min: MedalMinAggregateOutputType | null
    _max: MedalMaxAggregateOutputType | null
  }

  type GetMedalGroupByPayload<T extends MedalGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MedalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedalGroupByOutputType[P]>
            : GetScalarType<T[P], MedalGroupByOutputType[P]>
        }
      >
    >


  export type MedalSelect = {
    id?: boolean
    name?: boolean
    medalID?: boolean
    description?: boolean
    userIDs?: boolean
    users?: boolean | MemberFindManyArgs
    _count?: boolean | MedalCountOutputTypeArgs
  }

  export type MedalInclude = {
    users?: boolean | MemberFindManyArgs
    _count?: boolean | MedalCountOutputTypeArgs
  }

  export type MedalGetPayload<
    S extends boolean | null | undefined | MedalArgs,
    U = keyof S
      > = S extends true
        ? Medal
    : S extends undefined
    ? never
    : S extends MedalArgs | MedalFindManyArgs
    ?'include' extends U
    ? Medal  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < MemberGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? MedalCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < MemberGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? MedalCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Medal ? Medal[P] : never
  } 
    : Medal
  : Medal


  type MedalCountArgs = Merge<
    Omit<MedalFindManyArgs, 'select' | 'include'> & {
      select?: MedalCountAggregateInputType | true
    }
  >

  export interface MedalDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Medal that matches the filter.
     * @param {MedalFindUniqueArgs} args - Arguments to find a Medal
     * @example
     * // Get one Medal
     * const medal = await prisma.medal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedalFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MedalFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Medal'> extends True ? CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>> : CheckSelect<T, Prisma__MedalClient<Medal | null >, Prisma__MedalClient<MedalGetPayload<T> | null >>

    /**
     * Find the first Medal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalFindFirstArgs} args - Arguments to find a Medal
     * @example
     * // Get one Medal
     * const medal = await prisma.medal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedalFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MedalFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Medal'> extends True ? CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>> : CheckSelect<T, Prisma__MedalClient<Medal | null >, Prisma__MedalClient<MedalGetPayload<T> | null >>

    /**
     * Find zero or more Medals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medals
     * const medals = await prisma.medal.findMany()
     * 
     * // Get first 10 Medals
     * const medals = await prisma.medal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medalWithIdOnly = await prisma.medal.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedalFindManyArgs>(
      args?: SelectSubset<T, MedalFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Medal>>, PrismaPromise<Array<MedalGetPayload<T>>>>

    /**
     * Create a Medal.
     * @param {MedalCreateArgs} args - Arguments to create a Medal.
     * @example
     * // Create one Medal
     * const Medal = await prisma.medal.create({
     *   data: {
     *     // ... data to create a Medal
     *   }
     * })
     * 
    **/
    create<T extends MedalCreateArgs>(
      args: SelectSubset<T, MedalCreateArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Create many Medals.
     *     @param {MedalCreateManyArgs} args - Arguments to create many Medals.
     *     @example
     *     // Create many Medals
     *     const medal = await prisma.medal.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedalCreateManyArgs>(
      args?: SelectSubset<T, MedalCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Medal.
     * @param {MedalDeleteArgs} args - Arguments to delete one Medal.
     * @example
     * // Delete one Medal
     * const Medal = await prisma.medal.delete({
     *   where: {
     *     // ... filter to delete one Medal
     *   }
     * })
     * 
    **/
    delete<T extends MedalDeleteArgs>(
      args: SelectSubset<T, MedalDeleteArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Update one Medal.
     * @param {MedalUpdateArgs} args - Arguments to update one Medal.
     * @example
     * // Update one Medal
     * const medal = await prisma.medal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedalUpdateArgs>(
      args: SelectSubset<T, MedalUpdateArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Delete zero or more Medals.
     * @param {MedalDeleteManyArgs} args - Arguments to filter Medals to delete.
     * @example
     * // Delete a few Medals
     * const { count } = await prisma.medal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedalDeleteManyArgs>(
      args?: SelectSubset<T, MedalDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medals
     * const medal = await prisma.medal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedalUpdateManyArgs>(
      args: SelectSubset<T, MedalUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Medal.
     * @param {MedalUpsertArgs} args - Arguments to update or create a Medal.
     * @example
     * // Update or create a Medal
     * const medal = await prisma.medal.upsert({
     *   create: {
     *     // ... data to create a Medal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medal we want to update
     *   }
     * })
    **/
    upsert<T extends MedalUpsertArgs>(
      args: SelectSubset<T, MedalUpsertArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Find zero or more Medals that matches the filter.
     * @param {MedalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const medal = await prisma.medal.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MedalFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Medal.
     * @param {MedalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const medal = await prisma.medal.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MedalAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Medal that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MedalFindUniqueOrThrowArgs} args - Arguments to find a Medal
     * @example
     * // Get one Medal
     * const medal = await prisma.medal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MedalFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MedalFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Find the first Medal that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalFindFirstOrThrowArgs} args - Arguments to find a Medal
     * @example
     * // Get one Medal
     * const medal = await prisma.medal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MedalFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MedalFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MedalClient<Medal>, Prisma__MedalClient<MedalGetPayload<T>>>

    /**
     * Count the number of Medals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalCountArgs} args - Arguments to filter Medals to count.
     * @example
     * // Count the number of Medals
     * const count = await prisma.medal.count({
     *   where: {
     *     // ... the filter for the Medals we want to count
     *   }
     * })
    **/
    count<T extends MedalCountArgs>(
      args?: Subset<T, MedalCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedalAggregateArgs>(args: Subset<T, MedalAggregateArgs>): PrismaPromise<GetMedalAggregateType<T>>

    /**
     * Group by Medal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedalGroupByArgs['orderBy'] }
        : { orderBy?: MedalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedalGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Medal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MedalClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends MemberFindManyArgs = {}>(args?: Subset<T, MemberFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Member>>, PrismaPromise<Array<MemberGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Medal base type for findUnique actions
   */
  export type MedalFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * Filter, which Medal to fetch.
     * 
    **/
    where: MedalWhereUniqueInput
  }

  /**
   * Medal: findUnique
   */
  export interface MedalFindUniqueArgs extends MedalFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Medal base type for findFirst actions
   */
  export type MedalFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * Filter, which Medal to fetch.
     * 
    **/
    where?: MedalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medals to fetch.
     * 
    **/
    orderBy?: Enumerable<MedalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medals.
     * 
    **/
    cursor?: MedalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medals.
     * 
    **/
    distinct?: Enumerable<MedalScalarFieldEnum>
  }

  /**
   * Medal: findFirst
   */
  export interface MedalFindFirstArgs extends MedalFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Medal findMany
   */
  export type MedalFindManyArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * Filter, which Medals to fetch.
     * 
    **/
    where?: MedalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medals to fetch.
     * 
    **/
    orderBy?: Enumerable<MedalOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medals.
     * 
    **/
    cursor?: MedalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MedalScalarFieldEnum>
  }


  /**
   * Medal create
   */
  export type MedalCreateArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * The data needed to create a Medal.
     * 
    **/
    data: XOR<MedalCreateInput, MedalUncheckedCreateInput>
  }


  /**
   * Medal createMany
   */
  export type MedalCreateManyArgs = {
    /**
     * The data used to create many Medals.
     * 
    **/
    data: Enumerable<MedalCreateManyInput>
  }


  /**
   * Medal update
   */
  export type MedalUpdateArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * The data needed to update a Medal.
     * 
    **/
    data: XOR<MedalUpdateInput, MedalUncheckedUpdateInput>
    /**
     * Choose, which Medal to update.
     * 
    **/
    where: MedalWhereUniqueInput
  }


  /**
   * Medal updateMany
   */
  export type MedalUpdateManyArgs = {
    /**
     * The data used to update Medals.
     * 
    **/
    data: XOR<MedalUpdateManyMutationInput, MedalUncheckedUpdateManyInput>
    /**
     * Filter which Medals to update
     * 
    **/
    where?: MedalWhereInput
  }


  /**
   * Medal upsert
   */
  export type MedalUpsertArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * The filter to search for the Medal to update in case it exists.
     * 
    **/
    where: MedalWhereUniqueInput
    /**
     * In case the Medal found by the `where` argument doesn't exist, create a new Medal with this data.
     * 
    **/
    create: XOR<MedalCreateInput, MedalUncheckedCreateInput>
    /**
     * In case the Medal was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MedalUpdateInput, MedalUncheckedUpdateInput>
  }


  /**
   * Medal delete
   */
  export type MedalDeleteArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
    /**
     * Filter which Medal to delete.
     * 
    **/
    where: MedalWhereUniqueInput
  }


  /**
   * Medal deleteMany
   */
  export type MedalDeleteManyArgs = {
    /**
     * Filter which Medals to delete
     * 
    **/
    where?: MedalWhereInput
  }


  /**
   * Medal findRaw
   */
  export type MedalFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Medal aggregateRaw
   */
  export type MedalAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Medal: findUniqueOrThrow
   */
  export type MedalFindUniqueOrThrowArgs = MedalFindUniqueArgsBase
      

  /**
   * Medal: findFirstOrThrow
   */
  export type MedalFindFirstOrThrowArgs = MedalFindFirstArgsBase
      

  /**
   * Medal without action
   */
  export type MedalArgs = {
    /**
     * Select specific fields to fetch from the Medal
     * 
    **/
    select?: MedalSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: MedalInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GuildScalarFieldEnum: {
    id: 'id',
    guildId: 'guildId'
  };

  export type GuildScalarFieldEnum = (typeof GuildScalarFieldEnum)[keyof typeof GuildScalarFieldEnum]


  export const MedalScalarFieldEnum: {
    id: 'id',
    name: 'name',
    medalID: 'medalID',
    description: 'description',
    userIDs: 'userIDs'
  };

  export type MedalScalarFieldEnum = (typeof MedalScalarFieldEnum)[keyof typeof MedalScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    id: 'id',
    rblxId: 'rblxId',
    xp: 'xp',
    userId: 'userId',
    medalIDs: 'medalIDs',
    guildId: 'guildId'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type GuildWhereInput = {
    AND?: Enumerable<GuildWhereInput>
    OR?: Enumerable<GuildWhereInput>
    NOT?: Enumerable<GuildWhereInput>
    id?: StringFilter | string
    guildId?: StringFilter | string
    modules?: XOR<ModulesCompositeFilter, ModulesObjectEqualityInput>
    users?: MemberListRelationFilter
  }

  export type GuildOrderByWithRelationInput = {
    id?: SortOrder
    guildId?: SortOrder
    modules?: ModulesOrderByInput
    users?: MemberOrderByRelationAggregateInput
  }

  export type GuildWhereUniqueInput = {
    id?: string
    guildId?: string
  }

  export type GuildOrderByWithAggregationInput = {
    id?: SortOrder
    guildId?: SortOrder
    _count?: GuildCountOrderByAggregateInput
    _max?: GuildMaxOrderByAggregateInput
    _min?: GuildMinOrderByAggregateInput
  }

  export type GuildScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GuildScalarWhereWithAggregatesInput>
    OR?: Enumerable<GuildScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GuildScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    guildId?: StringWithAggregatesFilter | string
  }

  export type MemberWhereInput = {
    AND?: Enumerable<MemberWhereInput>
    OR?: Enumerable<MemberWhereInput>
    NOT?: Enumerable<MemberWhereInput>
    id?: StringFilter | string
    rblxId?: IntFilter | number
    xp?: IntFilter | number
    userId?: IntFilter | number
    medalIDs?: StringNullableListFilter
    medals?: MedalListRelationFilter
    guildId?: StringFilter | string
    Guild?: XOR<GuildRelationFilter, GuildWhereInput>
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
    medalIDs?: SortOrder
    medals?: MedalOrderByRelationAggregateInput
    guildId?: SortOrder
    Guild?: GuildOrderByWithRelationInput
  }

  export type MemberWhereUniqueInput = {
    id?: string
  }

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
    medalIDs?: SortOrder
    guildId?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _avg?: MemberAvgOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
    _sum?: MemberSumOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MemberScalarWhereWithAggregatesInput>
    OR?: Enumerable<MemberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MemberScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    rblxId?: IntWithAggregatesFilter | number
    xp?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    medalIDs?: StringNullableListFilter
    guildId?: StringWithAggregatesFilter | string
  }

  export type MedalWhereInput = {
    AND?: Enumerable<MedalWhereInput>
    OR?: Enumerable<MedalWhereInput>
    NOT?: Enumerable<MedalWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    medalID?: IntFilter | number
    description?: StringFilter | string
    userIDs?: StringNullableListFilter
    users?: MemberListRelationFilter
  }

  export type MedalOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    medalID?: SortOrder
    description?: SortOrder
    userIDs?: SortOrder
    users?: MemberOrderByRelationAggregateInput
  }

  export type MedalWhereUniqueInput = {
    id?: string
  }

  export type MedalOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    medalID?: SortOrder
    description?: SortOrder
    userIDs?: SortOrder
    _count?: MedalCountOrderByAggregateInput
    _avg?: MedalAvgOrderByAggregateInput
    _max?: MedalMaxOrderByAggregateInput
    _min?: MedalMinOrderByAggregateInput
    _sum?: MedalSumOrderByAggregateInput
  }

  export type MedalScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MedalScalarWhereWithAggregatesInput>
    OR?: Enumerable<MedalScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MedalScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    medalID?: IntWithAggregatesFilter | number
    description?: StringWithAggregatesFilter | string
    userIDs?: StringNullableListFilter
  }

  export type GuildCreateInput = {
    id?: string
    guildId: string
    modules: XOR<ModulesCreateEnvelopeInput, ModulesCreateInput>
    users?: MemberCreateNestedManyWithoutGuildInput
  }

  export type GuildUncheckedCreateInput = {
    id?: string
    guildId: string
    modules: XOR<ModulesCreateEnvelopeInput, ModulesCreateInput>
    users?: MemberUncheckedCreateNestedManyWithoutGuildInput
  }

  export type GuildUpdateInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
    users?: MemberUpdateManyWithoutGuildNestedInput
  }

  export type GuildUncheckedUpdateInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
    users?: MemberUncheckedUpdateManyWithoutGuildNestedInput
  }

  export type GuildCreateManyInput = {
    id?: string
    guildId: string
    modules: XOR<ModulesCreateEnvelopeInput, ModulesCreateInput>
  }

  export type GuildUpdateManyMutationInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
  }

  export type GuildUncheckedUpdateManyInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
  }

  export type MemberCreateInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    medals?: MedalCreateNestedManyWithoutUsersInput
    Guild: GuildCreateNestedOneWithoutUsersInput
  }

  export type MemberUncheckedCreateInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    medals?: MedalUncheckedCreateNestedManyWithoutUsersInput
    guildId: string
  }

  export type MemberUpdateInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    medals?: MedalUpdateManyWithoutUsersNestedInput
    Guild?: GuildUpdateOneRequiredWithoutUsersNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    medals?: MedalUncheckedUpdateManyWithoutUsersNestedInput
    guildId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberCreateManyInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    guildId: string
  }

  export type MemberUpdateManyMutationInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
  }

  export type MemberUncheckedUpdateManyInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    guildId?: StringFieldUpdateOperationsInput | string
  }

  export type MedalCreateInput = {
    id?: string
    name?: string
    medalID?: number
    description?: string
    userIDs?: MedalCreateuserIDsInput | Enumerable<string>
    users?: MemberCreateNestedManyWithoutMedalsInput
  }

  export type MedalUncheckedCreateInput = {
    id?: string
    name?: string
    medalID?: number
    description?: string
    userIDs?: MedalCreateuserIDsInput | Enumerable<string>
    users?: MemberUncheckedCreateNestedManyWithoutMedalsInput
  }

  export type MedalUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
    users?: MemberUpdateManyWithoutMedalsNestedInput
  }

  export type MedalUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
    users?: MemberUncheckedUpdateManyWithoutMedalsNestedInput
  }

  export type MedalCreateManyInput = {
    id?: string
    name?: string
    medalID?: number
    description?: string
    userIDs?: MedalCreateuserIDsInput | Enumerable<string>
  }

  export type MedalUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
  }

  export type MedalUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type ModulesCompositeFilter = {
    equals?: ModulesObjectEqualityInput
    is?: ModulesWhereInput
    isNot?: ModulesWhereInput
  }

  export type ModulesObjectEqualityInput = {
    moderation: boolean
    clanning: boolean
    logging: boolean
  }

  export type MemberListRelationFilter = {
    every?: MemberWhereInput
    some?: MemberWhereInput
    none?: MemberWhereInput
  }

  export type ModulesOrderByInput = {
    moderation?: SortOrder
    clanning?: SortOrder
    logging?: SortOrder
  }

  export type MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuildCountOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type GuildMaxOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type GuildMinOrderByAggregateInput = {
    id?: SortOrder
    guildId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type MedalListRelationFilter = {
    every?: MedalWhereInput
    some?: MedalWhereInput
    none?: MedalWhereInput
  }

  export type GuildRelationFilter = {
    is?: GuildWhereInput
    isNot?: GuildWhereInput
  }

  export type MedalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
    medalIDs?: SortOrder
    guildId?: SortOrder
  }

  export type MemberAvgOrderByAggregateInput = {
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
    guildId?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
    guildId?: SortOrder
  }

  export type MemberSumOrderByAggregateInput = {
    rblxId?: SortOrder
    xp?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type MedalCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    medalID?: SortOrder
    description?: SortOrder
    userIDs?: SortOrder
  }

  export type MedalAvgOrderByAggregateInput = {
    medalID?: SortOrder
  }

  export type MedalMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    medalID?: SortOrder
    description?: SortOrder
  }

  export type MedalMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    medalID?: SortOrder
    description?: SortOrder
  }

  export type MedalSumOrderByAggregateInput = {
    medalID?: SortOrder
  }

  export type ModulesCreateEnvelopeInput = {
    set?: ModulesCreateInput
  }

  export type ModulesCreateInput = {
    moderation?: boolean
    clanning?: boolean
    logging?: boolean
  }

  export type MemberCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<MemberCreateWithoutGuildInput>, Enumerable<MemberUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutGuildInput>
    createMany?: MemberCreateManyGuildInputEnvelope
    connect?: Enumerable<MemberWhereUniqueInput>
  }

  export type MemberUncheckedCreateNestedManyWithoutGuildInput = {
    create?: XOR<Enumerable<MemberCreateWithoutGuildInput>, Enumerable<MemberUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutGuildInput>
    createMany?: MemberCreateManyGuildInputEnvelope
    connect?: Enumerable<MemberWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ModulesUpdateEnvelopeInput = {
    set?: ModulesCreateInput
    update?: ModulesUpdateInput
  }

  export type MemberUpdateManyWithoutGuildNestedInput = {
    create?: XOR<Enumerable<MemberCreateWithoutGuildInput>, Enumerable<MemberUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<MemberUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: MemberCreateManyGuildInputEnvelope
    set?: Enumerable<MemberWhereUniqueInput>
    disconnect?: Enumerable<MemberWhereUniqueInput>
    delete?: Enumerable<MemberWhereUniqueInput>
    connect?: Enumerable<MemberWhereUniqueInput>
    update?: Enumerable<MemberUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<MemberUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<MemberScalarWhereInput>
  }

  export type MemberUncheckedUpdateManyWithoutGuildNestedInput = {
    create?: XOR<Enumerable<MemberCreateWithoutGuildInput>, Enumerable<MemberUncheckedCreateWithoutGuildInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutGuildInput>
    upsert?: Enumerable<MemberUpsertWithWhereUniqueWithoutGuildInput>
    createMany?: MemberCreateManyGuildInputEnvelope
    set?: Enumerable<MemberWhereUniqueInput>
    disconnect?: Enumerable<MemberWhereUniqueInput>
    delete?: Enumerable<MemberWhereUniqueInput>
    connect?: Enumerable<MemberWhereUniqueInput>
    update?: Enumerable<MemberUpdateWithWhereUniqueWithoutGuildInput>
    updateMany?: Enumerable<MemberUpdateManyWithWhereWithoutGuildInput>
    deleteMany?: Enumerable<MemberScalarWhereInput>
  }

  export type MemberCreatemedalIDsInput = {
    set: Enumerable<string>
  }

  export type MedalCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<MedalCreateWithoutUsersInput>, Enumerable<MedalUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<MedalCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<MedalWhereUniqueInput>
  }

  export type GuildCreateNestedOneWithoutUsersInput = {
    create?: XOR<GuildCreateWithoutUsersInput, GuildUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GuildCreateOrConnectWithoutUsersInput
    connect?: GuildWhereUniqueInput
  }

  export type MedalUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<MedalCreateWithoutUsersInput>, Enumerable<MedalUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<MedalCreateOrConnectWithoutUsersInput>
    connect?: Enumerable<MedalWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MemberUpdatemedalIDsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type MedalUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<MedalCreateWithoutUsersInput>, Enumerable<MedalUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<MedalCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<MedalUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<MedalWhereUniqueInput>
    disconnect?: Enumerable<MedalWhereUniqueInput>
    delete?: Enumerable<MedalWhereUniqueInput>
    connect?: Enumerable<MedalWhereUniqueInput>
    update?: Enumerable<MedalUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<MedalUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<MedalScalarWhereInput>
  }

  export type GuildUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<GuildCreateWithoutUsersInput, GuildUncheckedCreateWithoutUsersInput>
    connectOrCreate?: GuildCreateOrConnectWithoutUsersInput
    upsert?: GuildUpsertWithoutUsersInput
    connect?: GuildWhereUniqueInput
    update?: XOR<GuildUpdateWithoutUsersInput, GuildUncheckedUpdateWithoutUsersInput>
  }

  export type MedalUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<MedalCreateWithoutUsersInput>, Enumerable<MedalUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<MedalCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<MedalUpsertWithWhereUniqueWithoutUsersInput>
    set?: Enumerable<MedalWhereUniqueInput>
    disconnect?: Enumerable<MedalWhereUniqueInput>
    delete?: Enumerable<MedalWhereUniqueInput>
    connect?: Enumerable<MedalWhereUniqueInput>
    update?: Enumerable<MedalUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<MedalUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<MedalScalarWhereInput>
  }

  export type MedalCreateuserIDsInput = {
    set: Enumerable<string>
  }

  export type MemberCreateNestedManyWithoutMedalsInput = {
    create?: XOR<Enumerable<MemberCreateWithoutMedalsInput>, Enumerable<MemberUncheckedCreateWithoutMedalsInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutMedalsInput>
    connect?: Enumerable<MemberWhereUniqueInput>
  }

  export type MemberUncheckedCreateNestedManyWithoutMedalsInput = {
    create?: XOR<Enumerable<MemberCreateWithoutMedalsInput>, Enumerable<MemberUncheckedCreateWithoutMedalsInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutMedalsInput>
    connect?: Enumerable<MemberWhereUniqueInput>
  }

  export type MedalUpdateuserIDsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type MemberUpdateManyWithoutMedalsNestedInput = {
    create?: XOR<Enumerable<MemberCreateWithoutMedalsInput>, Enumerable<MemberUncheckedCreateWithoutMedalsInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutMedalsInput>
    upsert?: Enumerable<MemberUpsertWithWhereUniqueWithoutMedalsInput>
    set?: Enumerable<MemberWhereUniqueInput>
    disconnect?: Enumerable<MemberWhereUniqueInput>
    delete?: Enumerable<MemberWhereUniqueInput>
    connect?: Enumerable<MemberWhereUniqueInput>
    update?: Enumerable<MemberUpdateWithWhereUniqueWithoutMedalsInput>
    updateMany?: Enumerable<MemberUpdateManyWithWhereWithoutMedalsInput>
    deleteMany?: Enumerable<MemberScalarWhereInput>
  }

  export type MemberUncheckedUpdateManyWithoutMedalsNestedInput = {
    create?: XOR<Enumerable<MemberCreateWithoutMedalsInput>, Enumerable<MemberUncheckedCreateWithoutMedalsInput>>
    connectOrCreate?: Enumerable<MemberCreateOrConnectWithoutMedalsInput>
    upsert?: Enumerable<MemberUpsertWithWhereUniqueWithoutMedalsInput>
    set?: Enumerable<MemberWhereUniqueInput>
    disconnect?: Enumerable<MemberWhereUniqueInput>
    delete?: Enumerable<MemberWhereUniqueInput>
    connect?: Enumerable<MemberWhereUniqueInput>
    update?: Enumerable<MemberUpdateWithWhereUniqueWithoutMedalsInput>
    updateMany?: Enumerable<MemberUpdateManyWithWhereWithoutMedalsInput>
    deleteMany?: Enumerable<MemberScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type ModulesWhereInput = {
    AND?: Enumerable<ModulesWhereInput>
    OR?: Enumerable<ModulesWhereInput>
    NOT?: Enumerable<ModulesWhereInput>
    moderation?: BoolFilter | boolean
    clanning?: BoolFilter | boolean
    logging?: BoolFilter | boolean
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type MemberCreateWithoutGuildInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    medals?: MedalCreateNestedManyWithoutUsersInput
  }

  export type MemberUncheckedCreateWithoutGuildInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    medals?: MedalUncheckedCreateNestedManyWithoutUsersInput
  }

  export type MemberCreateOrConnectWithoutGuildInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutGuildInput, MemberUncheckedCreateWithoutGuildInput>
  }

  export type MemberCreateManyGuildInputEnvelope = {
    data: Enumerable<MemberCreateManyGuildInput>
  }

  export type ModulesUpdateInput = {
    moderation?: BoolFieldUpdateOperationsInput | boolean
    clanning?: BoolFieldUpdateOperationsInput | boolean
    logging?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MemberUpsertWithWhereUniqueWithoutGuildInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutGuildInput, MemberUncheckedUpdateWithoutGuildInput>
    create: XOR<MemberCreateWithoutGuildInput, MemberUncheckedCreateWithoutGuildInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutGuildInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutGuildInput, MemberUncheckedUpdateWithoutGuildInput>
  }

  export type MemberUpdateManyWithWhereWithoutGuildInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUsersInput>
  }

  export type MemberScalarWhereInput = {
    AND?: Enumerable<MemberScalarWhereInput>
    OR?: Enumerable<MemberScalarWhereInput>
    NOT?: Enumerable<MemberScalarWhereInput>
    id?: StringFilter | string
    rblxId?: IntFilter | number
    xp?: IntFilter | number
    userId?: IntFilter | number
    medalIDs?: StringNullableListFilter
    guildId?: StringFilter | string
  }

  export type MedalCreateWithoutUsersInput = {
    id?: string
    name?: string
    medalID?: number
    description?: string
    userIDs?: MedalCreateuserIDsInput | Enumerable<string>
  }

  export type MedalUncheckedCreateWithoutUsersInput = {
    id?: string
    name?: string
    medalID?: number
    description?: string
    userIDs?: MedalCreateuserIDsInput | Enumerable<string>
  }

  export type MedalCreateOrConnectWithoutUsersInput = {
    where: MedalWhereUniqueInput
    create: XOR<MedalCreateWithoutUsersInput, MedalUncheckedCreateWithoutUsersInput>
  }

  export type GuildCreateWithoutUsersInput = {
    id?: string
    guildId: string
    modules: XOR<ModulesCreateEnvelopeInput, ModulesCreateInput>
  }

  export type GuildUncheckedCreateWithoutUsersInput = {
    id?: string
    guildId: string
    modules: XOR<ModulesCreateEnvelopeInput, ModulesCreateInput>
  }

  export type GuildCreateOrConnectWithoutUsersInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutUsersInput, GuildUncheckedCreateWithoutUsersInput>
  }

  export type MedalUpsertWithWhereUniqueWithoutUsersInput = {
    where: MedalWhereUniqueInput
    update: XOR<MedalUpdateWithoutUsersInput, MedalUncheckedUpdateWithoutUsersInput>
    create: XOR<MedalCreateWithoutUsersInput, MedalUncheckedCreateWithoutUsersInput>
  }

  export type MedalUpdateWithWhereUniqueWithoutUsersInput = {
    where: MedalWhereUniqueInput
    data: XOR<MedalUpdateWithoutUsersInput, MedalUncheckedUpdateWithoutUsersInput>
  }

  export type MedalUpdateManyWithWhereWithoutUsersInput = {
    where: MedalScalarWhereInput
    data: XOR<MedalUpdateManyMutationInput, MedalUncheckedUpdateManyWithoutMedalsInput>
  }

  export type MedalScalarWhereInput = {
    AND?: Enumerable<MedalScalarWhereInput>
    OR?: Enumerable<MedalScalarWhereInput>
    NOT?: Enumerable<MedalScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    medalID?: IntFilter | number
    description?: StringFilter | string
    userIDs?: StringNullableListFilter
  }

  export type GuildUpsertWithoutUsersInput = {
    update: XOR<GuildUpdateWithoutUsersInput, GuildUncheckedUpdateWithoutUsersInput>
    create: XOR<GuildCreateWithoutUsersInput, GuildUncheckedCreateWithoutUsersInput>
  }

  export type GuildUpdateWithoutUsersInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
  }

  export type GuildUncheckedUpdateWithoutUsersInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    modules?: XOR<ModulesUpdateEnvelopeInput, ModulesCreateInput>
  }

  export type MemberCreateWithoutMedalsInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    Guild: GuildCreateNestedOneWithoutUsersInput
  }

  export type MemberUncheckedCreateWithoutMedalsInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
    guildId: string
  }

  export type MemberCreateOrConnectWithoutMedalsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutMedalsInput, MemberUncheckedCreateWithoutMedalsInput>
  }

  export type MemberUpsertWithWhereUniqueWithoutMedalsInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutMedalsInput, MemberUncheckedUpdateWithoutMedalsInput>
    create: XOR<MemberCreateWithoutMedalsInput, MemberUncheckedCreateWithoutMedalsInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutMedalsInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutMedalsInput, MemberUncheckedUpdateWithoutMedalsInput>
  }

  export type MemberUpdateManyWithWhereWithoutMedalsInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUsersInput>
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type MemberCreateManyGuildInput = {
    id?: string
    rblxId?: number
    xp?: number
    userId?: number
    medalIDs?: MemberCreatemedalIDsInput | Enumerable<string>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MemberUpdateWithoutGuildInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    medals?: MedalUpdateManyWithoutUsersNestedInput
  }

  export type MemberUncheckedUpdateWithoutGuildInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    medals?: MedalUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type MemberUncheckedUpdateManyWithoutUsersInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
  }

  export type MedalUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
  }

  export type MedalUncheckedUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
  }

  export type MedalUncheckedUpdateManyWithoutMedalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    medalID?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    userIDs?: MedalUpdateuserIDsInput | Enumerable<string>
  }

  export type MemberUpdateWithoutMedalsInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    Guild?: GuildUpdateOneRequiredWithoutUsersNestedInput
  }

  export type MemberUncheckedUpdateWithoutMedalsInput = {
    rblxId?: IntFieldUpdateOperationsInput | number
    xp?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    medalIDs?: MemberUpdatemedalIDsInput | Enumerable<string>
    guildId?: StringFieldUpdateOperationsInput | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}